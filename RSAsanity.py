import math

n = 4934732681183447187853377158480999507628110183183546749449879461740191028139723518405863358272084190486794079789167016063761056651022439472715904269053086320301931566083385357423094781907253825275709729453550568788661509902527787750765702698110897025141052700163898590333563041905099054767728906938922724587449861343296209182565802975162028644330652335044549206697323923932245198101503453296110181984347045669456744555387251562810693896567576968991199414037252423354233657216879077704650715866311758735442941871034917426174118966924179709083128758699757688370792561425495239445888871723156213286199508052224104830585793069839259601109636977568692047782790550139418768179522989153556999744432449881406942069233581406952164149294118673889095294889575373145337353806209361541977879471706225650101131245084345616907341237758510009923433555393940196806856240628613574405278386125190308390216531276277640059701800822160536743564707

d = 4923061662284452203125402526447727387700704945250875895639593191136261498112995759348339992531629591565185628343917448834716654805028444048478130718818818221676013391727785852862303477892794445949256962191312438600184122563545353292347272133419086459523205328930467028292247414526743463979487181187430696842648379302491611590010487665319495198492862214777647988651974194646353289626813842309020490997460648793207209248521129769133295517728631420214269803143012918700476796260885069068824657085819201467180765072750158265960454012891549730107046098139380562090606127181796027362654533344812259773837445811384285934412684236959540900767392878034810089053030177323291640588033225802264818243309626773546298149917975325320362703632700535708484055382491620564077836930911261124847034636343995193395307340571641456016501300907187025071672115208583195620831435030815914619098791469169406671658768039622044158741699869820030121927809

e = 65537  # Public exponent

# Prime factors of n
p = 2339687586579402854623367376527510341868816214750332025526808017160505973842575715815309729403194343038038167107510244743410464584895971086634806849203204485880070617828061853916761977901323547989572034068847912223642886731094026403136497548647810386596962529025164144085097240781616738766451884162058715211119993455226238437904218634204702200406242248513959250959048518611320892182541287159978309831349104294176103462770343879719725634040914025939896677158591073

q = 2109141711692359451315911194842864721651512080879033516195407056891260004914226579072695332743624767810421781555733229241159974350411610687390610306508608493772656631861855212826678554273615517395671288461082277103043889971424689748530448169508860496377767913388667977479362242088788997731515147707073713426058411879677206241555959456185421396593263461605791943336119750289972149955298232049699666219022160487340556127608179820486644234643922295325682609178121859 

# Calculate lambda(n)
lambda_n = math.lcm(p - 1, q - 1)

# Check if (e * d) mod lambda(n) is equal to 1
is_inverse = (e * d) % lambda_n == 1
print(is_inverse)

# Print the result of (e * d) mod Î»(n)
print((e * d) % lambda_n)
